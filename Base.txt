## Fase 1: Planificaci√≥n y Configuraci√≥n üìù
(Tiempo estimado: 1-2 horas)

El objetivo aqu√≠ es tener una base s√≥lida antes de escribir la l√≥gica principal.

Define tu Tema: Decide sobre qu√© ser√° tu API. Necesitas dos colecciones. Por ejemplo:

Colecci√≥n 1: products (con 7+ campos: name, description, price, category, stock, supplier, entryDate).

Colecci√≥n 2: suppliers (con campos: name, contactPerson, phone, email).

Configura la Base de Datos:

Ve a MongoDB Atlas o Compass.

Crea una nueva base de datos para este proyecto (ej: project2_db).

Crea las dos colecciones que definiste (products, suppliers). Puedes dejarlas vac√≠as por ahora.

Inicia el Proyecto Node.js:

En tu terminal, crea una nueva carpeta y ejecuta npm init -y.

Crea la estructura de carpetas: routes, controllers, db.

Instala las Dependencias Esenciales:

Bash

npm install express mongodb dotenv body-parser cors
Configura el Entorno Seguro:

Crea un archivo .gitignore y a√±ade node_modules/ y .env.

Crea un archivo .env en la ra√≠z.

Dentro de .env, a√±ade tu cadena de conexi√≥n de MongoDB: MONGODB_URI=mongodb+srv://...

Establece la Conexi√≥n a la Base de Datos:

En la carpeta db, crea connect.js y escribe el c√≥digo para conectar a MongoDB usando process.env.MONGODB_URI.

Crea el Servidor B√°sico:

Crea server.js. Configura express, el puerto, body-parser, cors y conecta tus rutas principales. Aseg√∫rate de que el servidor se inicie correctamente.

## Fase 2: Desarrollo del CRUD üíª
(Tiempo estimado: 3-4 horas)

Enf√≥cate en una colecci√≥n primero (ej: products). Haz que funcione por completo y luego replica el proceso para la segunda.

Crea las Rutas (GET y POST):

En routes/products.js, define las rutas:

GET /products (para obtener todos).

GET /products/{id} (para obtener uno).

POST /products (para crear uno nuevo).

Crea los Controladores (GET y POST):

En controllers/products.js, escribe la l√≥gica para esas tres funciones:

getAll: Usa .find() para obtener todos los documentos de la colecci√≥n products.

getSingle: Usa .find({_id: req.params.id}) para obtener un documento.

create: Usa .insertOne(req.body) para crear un nuevo documento.

Prueba cada ruta con Postman o Insomnia a medida que la terminas.

Implementa las Rutas (PUT y DELETE):

En routes/products.js, a√±ade las rutas:

PUT /products/{id} (para actualizar).

DELETE /products/{id} (para eliminar).

Implementa los Controladores (PUT y DELETE):

En controllers/products.js, escribe la l√≥gica para:

update: Usa .replaceOne({_id: req.params.id}, req.body).

delete: Usa .deleteOne({_id: req.params.id}).

Prueba estas nuevas rutas exhaustivamente.

Repite para la Segunda Colecci√≥n:

Crea routes/suppliers.js y controllers/suppliers.js.

Copia y adapta la l√≥gica que ya creaste para la colecci√≥n products. Este paso ser√° mucho m√°s r√°pido.

## Fase 3: Calidad y Documentaci√≥n ‚ú®
(Tiempo estimado: 2-3 horas)

Ahora que la funcionalidad b√°sica est√° lista, a√±√°dele las capas de profesionalismo requeridas.

A√±ade Validaci√≥n de Datos:

En tus controladores POST y PUT, antes de enviar los datos a la base de datos, a√±ade if statements para verificar que los campos requeridos existan en req.body.

Si un campo falta, env√≠a una respuesta de error 400 con un mensaje claro (ej: res.status(400).send('Product name is required')).

A√±ade Manejo de Errores:

Envuelve el c√≥digo de tus controladores que interact√∫a con la base de datos en un bloque try...catch.

Si ocurre un error en el try (ej: la base de datos est√° ca√≠da), el catch debe enviar una respuesta de error 500 (Error del Servidor).

Crea la Documentaci√≥n de la API (Swagger):

Instala los paquetes necesarios: npm install swagger-ui-express swagger-autogen.

Crea un archivo swagger.js para autogenerar la documentaci√≥n a partir de tus archivos de rutas.

A√±ade una ruta en server.js (ej: /api-docs) para servir la interfaz de Swagger UI.

Actualiza la documentaci√≥n para incluir todas tus rutas (GET, POST, PUT, DELETE) para ambas colecciones.

## Fase 4: Despliegue y Entrega üöÄ
(Tiempo estimado: 1-2 horas)

Los √∫ltimos pasos para finalizar y entregar tu trabajo.

Prepara para el Despliegue:

Aseg√∫rate de que tu package.json tenga un start script: "start": "node server.js".

Haz push de todo tu c√≥digo a tu repositorio de GitHub.

Publica en Render:

Crea un nuevo "Web Service" en Render y con√©ctalo a tu repositorio de GitHub.

En la configuraci√≥n de Render, establece el "Start Command" en node server.js.

Ve a la secci√≥n "Environment" y a√±ade tu MONGODB_URI como una variable de entorno. No subas tu archivo .env a GitHub.

Graba tu Video de Demostraci√≥n:

Planifica un video corto (5-8 min).

Muestra tu c√≥digo (estructura de carpetas).

Usa Postman o Insomnia para probar cada una de las rutas CRUD en tu URL de Render publicada. Demuestra que funcionan (crear, ver, actualizar, eliminar).

Muestra una prueba de validaci√≥n fallida (ej: intentar crear un producto sin nombre).

Muestra tu documentaci√≥n de Swagger funcionando.

Sube el video a YouTube (P√∫blico o No listado).

Env√≠a la Tarea:

Re√∫ne los tres enlaces: tu repositorio de GitHub, tu URL de Render y tu video de YouTube.

Env√≠alos en Canvas. ¬°Listo!